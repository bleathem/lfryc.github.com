---
layout: post
title: "Arquillian: Revolutionary Testing Platform for JSF - I."
tags: [ "arquillian", "warp", "graphene", "richfaces" ]
---

h5. Conclusion

Ideally, you have running instances of a application container and a browser which you can reuse from test to test.

This way we was able to achieve turnaround 4 seconds for simple UI tests and e.g. 8 seconds for more complex ones. It could be improved further, but certainly that's not enough to get you distracted from test to your favorite social network. ;-)

div(alert alert-info). Note: In case that you have deployment which takes longer time to deploy, you can leverage JRebel extension, which basically caches deployment and once the test is ran again, it will hot-deploy changes



h4. Further Enhancements

In case it's not enough for you and you would like to achieve even faster tests, there are still few improvements:

div(alert alert-warning). Note: following strategies weren't implemented yet.

h5. Pre-Deploying

In certain cases, it might be beneficial to utilize parallelization and pre-deploy archives to application container so Arquillian test cases won't need to undeploy one archive and deploy another one.

h5. Mock-Container

In case you test just JSF and Servlet interaction, there is possibility to decouple mock servlet from @jsf-test@ and use it as standalone embedded Arquillian container. That way you can run unit tests faster than with real container, but still with real JSF implementation.

h5. Test Parallelization

TBD


h2. Series Conclusion

As a result of all previous achievements, we can now:

* develop tests fast
* test what is important
* test against real browsers (and in the cloud)
* test against real containers
* run integration tests as they would be unit tests

We have put pretty extensive effort to improve testing, because we believe its fundamental part of success of every open-source project where many people may contribute to and we need to ensure that those changes doesn't affect functionality.

h3. Ultimate Coverage with Unit-Testing Experience

This way we have the great of both worlds - we are testing on real browsers and real containers during full-fledge testing sessions, but we also get as fast feedback as possible with our integration running headlessly.

h3. Call to Action

Call to all responsible developers and managers: There is no longer any excuse for not doing integration testing!